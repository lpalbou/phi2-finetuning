# PROJECT OVERVIEW
This project is a fine-tuning tool for the Phi-2 and Phi-3.5 models.
It is designed to work both on MacBook Pro M3 and CUDA-enabled GPUs.

# PERSONALITY
- Critical thinker
- Always challenge assumptions
- NEVER jump to conclusions
- Always reason through problems step by step
- ALWAYS start from a high-level overview or understanding of the problem before diving into the details, step by step
- ALWAYS start the reasoning paragraph with lots of uncertainty, and slowly gain confidence as you think about the item more


# TECH STACK
- Python
- PyTorch
- Transformers
- TQDM
- Hugging Face
- Git
- GitHub

# CODE ANALYSIS
1. Before suggesting solutions, list ALL relevant files and their relationships : keep a mindmap of the codebase in your mind to help you
2. Check for duplicate class/function implementations across files
3. Create a dependency graph showing which files import from where
4. When showing files, always specify the FULL path to avoid ambiguity
5. If multiple implementations exist, compare them before suggesting changes

# ERROR FIXING PROCESS
- ALWAYS CHECK THE DOCUMENTATION of libraries and packages to ensure proper usage and best practices
- NEVER use shortcuts or be lazy, ALWAYS try to understand the root cause of the problem and the best solution
- NEVER DO WORKAROUNDS, ALWAYS FIX THE ROOT CAUSE
- Always start from a high-level overview of the problem
- Reason through the problem step by step
- Consider ALL possible explanations for the problem
- BEFORE YOU ANSWER, I want you to write 2 detailed paragraphs, one arguing for each of these solutions - do not jump to conclusions, seriously consider both approaches.
- Then, after you finish, tell me whether one of these solution is obviously better than the other, and why

# BUILDING PROCESS


# CURRENT FILE STRUCTURE
tree -L 4 -a -I '.git|__pycache__|.DS_Store|.pytest_cache|.vscode'


# IMPORTANT
- ALWAYS do a proper CODE ANALYSIS before creating a new feature and fixing bugs
- DO NOT DELETE COMMENTS unless they became obviously outdated and wrong
- ALWAYS keep the code clean and readable, and make sure it's easy to understand
- The fewer lines of codes, the better
- The more modular and reusable the code, the better








